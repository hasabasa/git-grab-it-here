
import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from "sonner";
import { Lock, Eye, EyeOff, AlertCircle } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";

const ResetPasswordPage = () => {
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isValidToken, setIsValidToken] = useState(false);
  const [isCheckingToken, setIsCheckingToken] = useState(true);
  const [debugInfo, setDebugInfo] = useState<string>('');
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();

  useEffect(() => {
    const checkTokenAndSetSession = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const allParams = Object.fromEntries(searchParams.entries());
        console.log('üîç Reset password URL analysis:', {
          currentURL: window.location.href,
          allParams,
          hasHash: !!window.location.hash,
          hash: window.location.hash
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ URL parameters
        const accessToken = searchParams.get('access_token');
        const refreshToken = searchParams.get('refresh_token');
        const type = searchParams.get('type');
        const error = searchParams.get('error');
        const errorDescription = searchParams.get('error_description');

        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ hash (–µ—Å–ª–∏ Supabase –∏—Å–ø–æ–ª—å–∑—É–µ—Ç hash-based routing)
        const hash = window.location.hash.substring(1);
        const hashParams = new URLSearchParams(hash);
        const hashAccessToken = hashParams.get('access_token');
        const hashRefreshToken = hashParams.get('refresh_token');
        const hashType = hashParams.get('type');
        const hashError = hashParams.get('error');

        console.log('üîç Token analysis:', {
          fromParams: { accessToken: !!accessToken, refreshToken: !!refreshToken, type, error, errorDescription },
          fromHash: { accessToken: !!hashAccessToken, refreshToken: !!hashRefreshToken, type: hashType, error: hashError }
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        if (error || hashError) {
          const errorMsg = errorDescription || hashError || 'Unknown error';
          console.error('‚ùå Error in URL:', errorMsg);
          setDebugInfo(`Error in URL: ${errorMsg}`);
          toast.error(`–û—à–∏–±–∫–∞ –≤ —Å—Å—ã–ª–∫–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${errorMsg}`);
          setTimeout(() => navigate('/auth'), 3000);
          return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ hash, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ params
        const finalAccessToken = hashAccessToken || accessToken;
        const finalRefreshToken = hashRefreshToken || refreshToken;
        const finalType = hashType || type;

        console.log('üîç Final tokens:', {
          hasAccessToken: !!finalAccessToken,
          hasRefreshToken: !!finalRefreshToken,
          type: finalType
        });

        if (!finalAccessToken || !finalRefreshToken) {
          console.error('‚ùå Missing required tokens');
          setDebugInfo('Missing access_token or refresh_token in URL');
          toast.error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–∫–µ–Ω—ã.');
          setTimeout(() => navigate('/auth'), 3000);
          return;
        }

        if (finalType !== 'recovery') {
          console.error('‚ùå Invalid token type:', finalType);
          setDebugInfo(`Invalid type: ${finalType}, expected: recovery`);
          toast.error('–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.');
          setTimeout(() => navigate('/auth'), 3000);
          return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        console.log('üîÑ Setting session with tokens...');
        const { data: sessionData, error: sessionError } = await supabase.auth.setSession({
          access_token: finalAccessToken,
          refresh_token: finalRefreshToken
        });

        if (sessionError) {
          console.error('‚ùå Error setting session:', sessionError);
          setDebugInfo(`Session error: ${sessionError.message}`);
          toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Å—Å–∏–∏: ' + sessionError.message);
          setTimeout(() => navigate('/auth'), 3000);
          return;
        }

        if (!sessionData.session) {
          console.error('‚ùå No session returned');
          setDebugInfo('No session returned after setting tokens');
          toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
          setTimeout(() => navigate('/auth'), 3000);
          return;
        }

        console.log('‚úÖ Session set successfully for:', sessionData.session.user.email);
        setDebugInfo(`Session established for: ${sessionData.session.user.email}`);
        setIsValidToken(true);
        
      } catch (error: any) {
        console.error('‚ùå Unexpected error:', error);
        setDebugInfo(`Unexpected error: ${error.message}`);
        toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
        setTimeout(() => navigate('/auth'), 3000);
      } finally {
        setIsCheckingToken(false);
      }
    };

    checkTokenAndSetSession();
  }, [searchParams, navigate]);

  const validatePasswords = () => {
    if (!newPassword || !confirmPassword) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return false;
    }
    
    if (newPassword.length < 6) {
      toast.error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return false;
    }
    
    if (newPassword !== confirmPassword) {
      toast.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return false;
    }
    
    return true;
  };

  const handleResetPassword = async () => {
    if (!validatePasswords()) return;
    
    setIsLoading(true);
    
    try {
      console.log('üîÑ Attempting to update password...');
      
      const { data, error } = await supabase.auth.updateUser({
        password: newPassword
      });
      
      if (error) {
        console.error('‚ùå Password update error:', error);
        throw error;
      }
      
      console.log('‚úÖ Password updated successfully:', data);
      toast.success('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.');
      
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      await supabase.auth.signOut();
      
      setTimeout(() => {
        navigate('/auth');
      }, 2000);
      
    } catch (error: any) {
      console.error('‚ùå Error resetting password:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è');
    } finally {
      setIsLoading(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
  if (isCheckingToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏...</CardTitle>
            <CardDescription className="text-center">
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
            </CardDescription>
          </CardHeader>
          {debugInfo && (
            <CardContent>
              <div className="text-xs text-gray-500 bg-gray-100 p-2 rounded">
                Debug: {debugInfo}
              </div>
            </CardContent>
          )}
        </Card>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
  if (!isValidToken) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-center justify-center">
              <AlertCircle className="h-5 w-5 text-red-500" />
              –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
            </CardTitle>
            <CardDescription className="text-center">
              –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {debugInfo && (
              <div className="text-xs text-gray-500 bg-gray-100 p-2 rounded">
                Debug: {debugInfo}
              </div>
            )}
            <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded border border-blue-200">
              <p className="font-medium mb-2">–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:</p>
              <ul className="text-xs space-y-1">
                <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞</li>
                <li>‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ 1 —á–∞—Å</li>
                <li>‚Ä¢ –ù–µ –∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —á–∞—Å—Ç–∏—á–Ω–æ</li>
                <li>‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É</li>
              </ul>
            </div>
            <Button
              variant="outline"
              onClick={() => navigate('/auth')}
              className="w-full"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 px-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-center justify-center">
            <Lock className="h-5 w-5" />
            –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
          </CardTitle>
          <CardDescription className="text-center">
            –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {debugInfo && (
            <div className="text-xs text-green-600 bg-green-50 p-2 rounded">
              ‚úÖ {debugInfo}
            </div>
          )}
          
          <div className="space-y-2">
            <Label htmlFor="newPassword">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</Label>
            <div className="relative">
              <Input
                id="newPassword"
                type={showPassword ? "text" : "password"}
                value={newPassword}
                onChange={(e) => setNewPassword(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
                className="pr-10"
              />
              <Button
                type="button"
                variant="ghost"
                size="sm"
                className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="confirmPassword">–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
            <div className="relative">
              <Input
                id="confirmPassword"
                type={showConfirmPassword ? "text" : "password"}
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                className="pr-10"
              />
              <Button
                type="button"
                variant="ghost"
                size="sm"
                className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              >
                {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </Button>
            </div>
          </div>

          <Button 
            onClick={handleResetPassword} 
            disabled={isLoading} 
            className="w-full"
          >
            {isLoading ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è...' : '–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
          </Button>
          
          <div className="text-center">
            <Button
              variant="link"
              onClick={() => navigate('/auth')}
              className="text-sm text-gray-600"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ResetPasswordPage;
